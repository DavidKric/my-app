import React, { useMemo, useState } from 'react';
import { useAnnotations } from './AnnotationProvider';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Annotation, AnnotationType } from '@/components/pdf_viewer/annotations/AnnotationOverlay';
import { AnnotationItem } from './AnnotationItem';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Settings, X, Filter } from 'lucide-react';
import AnnotationFilterBar from './AnnotationFilterBar';

export const AnnotationList: React.FC = () => {
  const { state, dispatch } = useAnnotations();
  const { annotations, selectedAnnotation } = state;
  const [showFilters, setShowFilters] = useState(false);

  // Group annotations by category for consistent UI with SkimmingHighlightsPanel
  const groupedAnnotations = useMemo(() => {
    const userAnnotations = annotations.filter(annotation => {
      // Skip auto-generated annotations - they're shown in the skimming panel
      if (annotation.isAutoGenerated) return false;
      
      // Show all user annotations
      return true;
    }).sort((a, b) => {
      // Sort by page number 
      if (a.pageNumber !== b.pageNumber) {
        return a.pageNumber - b.pageNumber;
      }
      // If we have boundingRect, sort by y position
      if (a.boundingRect && b.boundingRect) {
        return a.boundingRect.y - b.boundingRect.y;
      }
      return 0;
    });

    // Group by category
    return userAnnotations.reduce<Record<string, Annotation[]>>((acc, annotation) => {
      const category = annotation.category || 'Other';
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(annotation);
      return acc;
    }, {});
  }, [annotations]);

  const handleAnnotationClick = (annotation: Annotation) => {
    dispatch({ type: 'SELECT_ANNOTATION', id: annotation.id });
    
    // Change to the page where the annotation is
    dispatch({ 
      type: 'SET_CURRENT_PAGE', 
      page: annotation.pageNumber 
    });
  };

  // Get category color for consistent display
  const getCategoryColor = (category: string) => {
    const categoryMap: Record<string, string> = {
      'Important': 'bg-yellow-100 text-yellow-800 border-yellow-200',
      'Question': 'bg-blue-100 text-blue-800 border-blue-200',
      'Definition': 'bg-emerald-100 text-emerald-800 border-emerald-200',
      'Reference': 'bg-indigo-100 text-indigo-800 border-indigo-200',
      'Other': 'bg-gray-100 text-gray-800 border-gray-200'
    };
    
    return categoryMap[category] || categoryMap['Other'];
  };

  const hasAnnotations = Object.values(groupedAnnotations).flat().length > 0;

  return (
    <div className="h-full flex flex-col">
      <div className="p-3 border-b flex items-center justify-between">
        <h2 className="text-lg font-semibold">Annotations</h2>
        <Button 
          variant="ghost" 
          size="icon"
          onClick={() => setShowFilters(!showFilters)}
        >
          {showFilters ? (
            <X className="h-4 w-4" />
          ) : (
            <Filter className="h-4 w-4" />
          )}
        </Button>
      </div>

      {showFilters && <AnnotationFilterBar />}

      <ScrollArea className="flex-1">
        <div className="p-3">
          {hasAnnotations ? (
            Object.entries(groupedAnnotations).map(([category, categoryAnnotations]) => (
              <div key={category} className="mb-4">
                <h3 className="text-sm font-medium mb-2 flex items-center">
                  <Badge variant="outline" className={getCategoryColor(category)}>
                    {category}
                  </Badge>
                  <span className="ml-2 text-xs text-muted-foreground">
                    ({categoryAnnotations.length})
                  </span>
                </h3>
                <div className="space-y-2">
                  {categoryAnnotations.map(annotation => (
                    <AnnotationItem
                      key={annotation.id}
                      annotation={annotation}
                      isSelected={selectedAnnotation === annotation.id}
                      onClick={() => handleAnnotationClick(annotation)}
                    />
                  ))}
                </div>
              </div>
            ))
          ) : (
            <div className="flex flex-col items-center justify-center h-40 text-center text-muted-foreground p-4">
              <p>No annotations to display</p>
              <p className="text-sm">Highlight text, add notes, or adjust filters</p>
            </div>
          )}
        </div>
      </ScrollArea>
    </div>
  );
}; 