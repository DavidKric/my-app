import React, { useEffect, useRef } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { MessageSquare, Highlighter, PenTool, Star, FileText, Lightbulb, BookMarked, ExternalLink } from 'lucide-react';
import { Annotation, AnnotationType } from '@/components/pdf_viewer/annotations/AnnotationOverlay';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import scrollService from '@/lib/scroll-service';

interface AnnotationItemProps {
  annotation: Annotation;
  isSelected: boolean;
  onClick: () => void;
}

export const AnnotationItem: React.FC<AnnotationItemProps> = ({ 
  annotation, 
  isSelected, 
  onClick
}) => {
  const itemRef = useRef<HTMLDivElement>(null);
  
  // Scroll into view if selected
  useEffect(() => {
    if (isSelected && itemRef.current) {
      itemRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest'
      });
    }
  }, [isSelected]);
  
  const renderImportance = () => {
    if (!annotation.isAutoGenerated || !annotation.importance) return null;
    
    const stars = [];
    for (let i = 0; i < annotation.importance; i++) {
      stars.push(<Star key={i} className="h-3 w-3 fill-yellow-400 text-yellow-400" />);
    }
    
    return (
      <div className="flex items-center space-x-0.5 mt-1">
        {stars}
      </div>
    );
  };

  const getAnnotationIcon = () => {
    if (annotation.isAutoGenerated) {
      switch (annotation.type) {
        case AnnotationType.KEY_INSIGHT:
          return <Lightbulb className="h-4 w-4 text-amber-600" />;
        case AnnotationType.DEFINITION:
          return <BookMarked className="h-4 w-4 text-emerald-600" />;
        case AnnotationType.REFERENCE:
          return <ExternalLink className="h-4 w-4 text-indigo-600" />;
        case AnnotationType.METHOD:
          return <FileText className="h-4 w-4 text-blue-600" />;
        case AnnotationType.RESULT:
          return <FileText className="h-4 w-4 text-green-600" />;
        case AnnotationType.GOAL:
          return <FileText className="h-4 w-4 text-amber-600" />;
        default:
          return <Lightbulb className="h-4 w-4 text-violet-600" />;
      }
    } else {
      switch (annotation.type) {
        case AnnotationType.NOTE:
          return <MessageSquare className="h-4 w-4 text-blue-600" />;
        case AnnotationType.HIGHLIGHT:
          return <Highlighter className="h-4 w-4 text-yellow-600" />;
        case AnnotationType.DRAW:
          return <PenTool className="h-4 w-4 text-pink-600" />;
        case AnnotationType.COMMENT:
          return <FileText className="h-4 w-4 text-cyan-600" />;
        default:
          return <Highlighter className="h-4 w-4 text-gray-600" />;
      }
    }
  };

  const getAnnotationTypeLabel = () => {
    if (annotation.isAutoGenerated) {
      switch (annotation.type) {
        case AnnotationType.KEY_INSIGHT:
          return "Key Insight";
        case AnnotationType.DEFINITION:
          return "Definition";
        case AnnotationType.REFERENCE:
          return "Reference";
        case AnnotationType.METHOD:
          return "Method";
        case AnnotationType.RESULT:
          return "Result";
        case AnnotationType.GOAL:
          return "Goal";
        default:
          return annotation.category;
      }
    } else {
      switch (annotation.type) {
        case AnnotationType.HIGHLIGHT:
          return "Highlight";
        case AnnotationType.NOTE:
          return "Note";
        case AnnotationType.DRAW:
          return "Drawing";
        case AnnotationType.COMMENT:
          return "Comment";
        default:
          return annotation.category;
      }
    }
  };

  // Get border color based on annotation type for skimming highlights
  const getSkimmingBorderColor = () => {
    if (!annotation.isAutoGenerated) return '';
    
    switch (annotation.type) {
      case AnnotationType.KEY_INSIGHT:
        return 'border-l-amber-500';
      case AnnotationType.DEFINITION:
        return 'border-l-emerald-500';
      case AnnotationType.REFERENCE:
        return 'border-l-indigo-500';
      case AnnotationType.METHOD:
        return 'border-l-blue-500';
      case AnnotationType.RESULT:
        return 'border-l-green-500';
      case AnnotationType.GOAL:
        return 'border-l-amber-500';
      default:
        return 'border-l-violet-500';
    }
  };
  
  const handleItemClick = () => {
    onClick();
    
    // Use the scrollService to scroll to this annotation
    scrollService.scrollToAnnotation(annotation, {
      highlight: true, 
      smooth: true,
      focus: true
    });
  };

  return (
    <Card 
      ref={itemRef}
      className={cn(
        "mb-2 cursor-pointer transition-all",
        isSelected ? "ring-2 ring-primary" : "hover:ring-1 hover:ring-primary/50",
        annotation.isAutoGenerated && "border-l-4",
        annotation.isAutoGenerated && getSkimmingBorderColor()
      )}
      onClick={handleItemClick}
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          handleItemClick();
        }
      }}
      id={`annotation-item-${annotation.id}`}
    >
      <CardContent className="p-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center space-x-2">
            {getAnnotationIcon()}
            <Badge variant="outline" className="text-xs">
              {getAnnotationTypeLabel()}
            </Badge>
            {annotation.creator && (
              <span className="text-xs text-muted-foreground">
                by {annotation.creator}
              </span>
            )}
          </div>
          <span className="text-xs text-muted-foreground">
            p.{annotation.pageNumber}
          </span>
        </div>
        {annotation.textSnippet && (
          <p className="mt-1 text-sm line-clamp-3">
            {annotation.textSnippet}
          </p>
        )}
        {renderImportance()}
      </CardContent>
    </Card>
  );
}; 