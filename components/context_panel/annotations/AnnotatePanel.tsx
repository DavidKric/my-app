'use client';

import React, { useState, useEffect } from 'react';
import { useAnnotations } from '@/components/context_panel/annotations/AnnotationProvider';
import { 
  Annotation, 
  AnnotationType 
} from '@/components/pdf_viewer/annotations/AnnotationOverlay';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { 
  BookMarked, 
  Lightbulb, 
  MessageSquare,
  Clock, 
  UserCircle2, 
  Bot,
  Wand2, 
  Brain,
  MousePointer,
  Filter,
  MoveVertical,
  ExternalLink,
  CalendarDays,
  Check,
  X,
  ChevronDown,
  ChevronUp,
  PlusCircle,
  Eye,
  EyeOff,
  PenTool
} from 'lucide-react';

// Annotation category colors
const CATEGORY_COLORS: Record<string, string> = {
  "Clause": "bg-blue-100 border-blue-200 text-blue-800 hover:bg-blue-200",
  "Risk": "bg-red-100 border-red-200 text-red-800 hover:bg-red-200",
  "Definition": "bg-green-100 border-green-200 text-green-800 hover:bg-green-200",
  "Reference": "bg-purple-100 border-purple-200 text-purple-800 hover:bg-purple-200",
  "Other": "bg-gray-100 border-gray-200 text-gray-800 hover:bg-gray-200",
  "key_insight": "bg-amber-100 border-amber-200 text-amber-800 hover:bg-amber-200",
  "definition": "bg-emerald-100 border-emerald-200 text-emerald-800 hover:bg-emerald-200",
  "reference": "bg-indigo-100 border-indigo-200 text-indigo-800 hover:bg-indigo-200"
};

interface AnnotatePanelProps {
  onJumpToAnnotation?: (annotation: Annotation) => void;
  onGenerateAnnotations?: () => void;
  hasAutoAnnotations?: boolean;
}

export default function AnnotatePanel({ 
  onJumpToAnnotation,
  onGenerateAnnotations,
  hasAutoAnnotations = false
}: AnnotatePanelProps) {
  const { state, dispatch } = useAnnotations();
  const { annotations, currentPage } = state;
  
  // Local state
  const [activeTab, setActiveTab] = useState<string>('all');
  const [showAutoAnnotations, setShowAutoAnnotations] = useState<boolean>(true);
  const [showUserAnnotations, setShowUserAnnotations] = useState<boolean>(true);
  const [annotationDensity, setAnnotationDensity] = useState<number>(50);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [filterExpanded, setFilterExpanded] = useState<boolean>(false);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [sortBy, setSortBy] = useState<string>('position'); // 'position', 'importance', 'time'

  // Filter annotations based on user preferences
  const filteredAnnotations = annotations.filter(annotation => {
    // Filter by tab
    if (activeTab === 'current' && annotation.pageNumber !== currentPage) {
      return false;
    }
    
    // Filter by source
    if (annotation.isAutoGenerated && !showAutoAnnotations) {
      return false;
    }
    
    if (!annotation.isAutoGenerated && !showUserAnnotations) {
      return false;
    }
    
    // Filter by category if categories are selected
    if (selectedCategories.length > 0) {
      if (annotation.isAutoGenerated) {
        // For auto annotations, match by type
        if (!selectedCategories.includes(annotation.type as string)) {
          return false;
        }
      } else {
        // For user annotations, match by category
        if (!selectedCategories.includes(annotation.category)) {
          return false;
        }
      }
    }
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      const textSnippet = annotation.textSnippet.toLowerCase();
      const comment = annotation.comment?.toLowerCase() || '';
      
      if (!textSnippet.includes(query) && !comment.includes(query)) {
        return false;
      }
    }
    
    // Filter by density (only apply to auto annotations)
    if (annotation.isAutoGenerated && annotation.importance) {
      // Only show important auto annotations when density is low
      const threshold = 5 - Math.floor(annotationDensity / 20); // 5 at 0%, 1 at 100%
      if (annotation.importance < threshold) {
        return false;
      }
    }
    
    return true;
  });
  
  // Sort annotations
  const sortedAnnotations = [...filteredAnnotations].sort((a, b) => {
    switch (sortBy) {
      case 'importance':
        // Sort by importance (high to low)
        return (b.importance || 0) - (a.importance || 0);
      case 'time':
        // Sort by timestamp (new to old)
        return b.timestamp - a.timestamp;
      case 'position':
      default:
        // Sort by page number and position on page
        if (a.pageNumber !== b.pageNumber) {
          return a.pageNumber - b.pageNumber;
        }
        return a.boundingRect.y - b.boundingRect.y;
    }
  });
  
  // Handle jumping to annotation
  const handleJumpToAnnotation = (annotation: Annotation) => {
    if (onJumpToAnnotation) {
      onJumpToAnnotation(annotation);
    }
  };
  
  // Handle toggling auto annotations
  const handleAutoAnnotationsToggle = (checked: boolean) => {
    setShowAutoAnnotations(checked);
  };
  
  // Handle toggling user annotations
  const handleUserAnnotationsToggle = (checked: boolean) => {
    setShowUserAnnotations(checked);
  };
  
  // Handle density slider change
  const handleDensityChange = (value: number[]) => {
    setAnnotationDensity(value[0]);
  };
  
  // Handle category toggle
  const handleCategoryToggle = (category: string) => {
    if (selectedCategories.includes(category)) {
      setSelectedCategories(selectedCategories.filter(c => c !== category));
    } else {
      setSelectedCategories([...selectedCategories, category]);
    }
  };
  
  // Get unique categories from annotations
  const getUniqueCategories = () => {
    const categories = new Set<string>();
    
    // Add user annotation categories
    annotations
      .filter(a => !a.isAutoGenerated)
      .forEach(a => categories.add(a.category));
    
    // Add auto annotation types
    annotations
      .filter(a => a.isAutoGenerated)
      .forEach(a => categories.add(a.type as string));
    
    return Array.from(categories);
  };
  
  const uniqueCategories = getUniqueCategories();
  
  // Format the timestamp
  const formatDate = (timestamp: number | undefined) => {
    if (!timestamp) return 'Unknown date';
    
    const date = new Date(timestamp);
    return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }) + 
           ' at ' + 
           date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
  };
  
  // Get icon for annotation type
  const getAnnotationIcon = (annotation: Annotation) => {
    if (annotation.isAutoGenerated) {
      switch (annotation.type) {
        case AnnotationType.KEY_INSIGHT:
          return <Lightbulb className="h-4 w-4 text-amber-600" />;
        case AnnotationType.DEFINITION:
          return <BookMarked className="h-4 w-4 text-emerald-600" />;
        case AnnotationType.REFERENCE:
          return <ExternalLink className="h-4 w-4 text-indigo-600" />;
        default:
          return <Brain className="h-4 w-4 text-violet-600" />;
      }
    } else {
      switch (annotation.type) {
        case AnnotationType.NOTE:
          return <MessageSquare className="h-4 w-4 text-blue-600" />;
        case AnnotationType.HIGHLIGHT:
          return <MousePointer className="h-4 w-4 text-yellow-600" />;
        case AnnotationType.DRAW:
          return <PenTool className="h-4 w-4 text-red-600" />;
        default:
          return <MousePointer className="h-4 w-4 text-gray-600" />;
      }
    }
  };
  
  return (
    <div className="h-full flex flex-col">
      <div className="border-b p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Annotations</h2>
          {onGenerateAnnotations && !hasAutoAnnotations && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={onGenerateAnnotations}
              className="flex items-center gap-1"
            >
              <Wand2 className="h-4 w-4" />
              <span>Generate</span>
            </Button>
          )}
        </div>
        
        <Input
          type="text"
          placeholder="Search annotations..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="mb-3"
        />
        
        <div className="flex items-center justify-between mb-2">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => setFilterExpanded(!filterExpanded)}
            className="flex items-center gap-1 text-sm text-muted-foreground"
          >
            <Filter className="h-3.5 w-3.5" />
            <span>Filters</span>
            {filterExpanded ? (
              <ChevronUp className="h-3.5 w-3.5" />
            ) : (
              <ChevronDown className="h-3.5 w-3.5" />
            )}
          </Button>
          
          <div className="flex items-center gap-1">
            <Button 
              variant={sortBy === 'position' ? 'default' : 'outline'} 
              size="sm"
              onClick={() => setSortBy('position')}
              className="h-7 px-2 py-1 text-xs"
            >
              <MoveVertical className="h-3.5 w-3.5 mr-1" />
              Position
            </Button>
            
            <Button 
              variant={sortBy === 'importance' ? 'default' : 'outline'} 
              size="sm"
              onClick={() => setSortBy('importance')}
              className="h-7 px-2 py-1 text-xs"
            >
              <Lightbulb className="h-3.5 w-3.5 mr-1" />
              Importance
            </Button>
            
            <Button 
              variant={sortBy === 'time' ? 'default' : 'outline'} 
              size="sm"
              onClick={() => setSortBy('time')}
              className="h-7 px-2 py-1 text-xs"
            >
              <Clock className="h-3.5 w-3.5 mr-1" />
              Time
            </Button>
          </div>
        </div>
        
        {filterExpanded && (
          <div className="space-y-4 mt-3 pt-3 border-t animate-in slide-in-from-top-2">
            <div>
              <h3 className="text-sm font-medium mb-2">Types</h3>
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Brain className="h-4 w-4 text-violet-600" />
                  <span className="text-sm">Auto-detected</span>
                </div>
                <Switch 
                  checked={showAutoAnnotations}
                  onCheckedChange={handleAutoAnnotationsToggle}
                  aria-label="Toggle auto-detected annotations"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <UserCircle2 className="h-4 w-4 text-blue-600" />
                  <span className="text-sm">User annotations</span>
                </div>
                <Switch 
                  checked={showUserAnnotations}
                  onCheckedChange={handleUserAnnotationsToggle}
                  aria-label="Toggle user annotations"
                />
              </div>
            </div>
            
            {showAutoAnnotations && (
              <div>
                <h3 className="text-sm font-medium mb-2">Annotation Density</h3>
                <div className="px-1">
                  <div className="flex justify-between text-xs text-muted-foreground mb-1">
                    <span>Less</span>
                    <span>More</span>
                  </div>
                  <Slider
                    value={[annotationDensity]}
                    min={0}
                    max={100}
                    step={10}
                    onValueChange={handleDensityChange}
                    aria-label="Annotation density"
                  />
                </div>
              </div>
            )}
            
            <div>
              <h3 className="text-sm font-medium mb-2">Categories</h3>
              <div className="flex flex-wrap gap-1">
                {uniqueCategories.map(category => (
                  <Badge 
                    key={category}
                    variant={selectedCategories.includes(category) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => handleCategoryToggle(category)}
                  >
                    {category}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="w-full rounded-none px-3 border-b bg-transparent h-auto py-0">
          <TabsTrigger 
            value="all" 
            className="flex-1 py-2 m-0 data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:shadow-none rounded-none"
          >
            All
          </TabsTrigger>
          <TabsTrigger 
            value="current" 
            className="flex-1 py-2 m-0 data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:shadow-none rounded-none"
          >
            Current page
          </TabsTrigger>
        </TabsList>
        
        {['all', 'current'].map(tab => (
          <TabsContent 
            key={tab}
            value={tab} 
            className="flex-1 p-0 m-0 data-[state=inactive]:hidden overflow-hidden h-full"
          >
            <ScrollArea className="h-[calc(100vh-230px)]">
              <div className="p-3 space-y-3">
                {sortedAnnotations.length > 0 ? (
                  sortedAnnotations.map(annotation => (
                    <AnnotationCard 
                      key={annotation.id}
                      annotation={annotation}
                      onClick={() => handleJumpToAnnotation(annotation)}
                      formatDate={formatDate}
                      getIcon={getAnnotationIcon}
                    />
                  ))
                ) : (
                  <div className="flex flex-col items-center justify-center h-32 text-center p-4">
                    <p className="text-muted-foreground mb-2">No annotations found</p>
                    <p className="text-xs text-muted-foreground">
                      {searchQuery 
                        ? "Try a different search term or adjust your filters" 
                        : "Create annotations by selecting text in the document"}
                    </p>
                  </div>
                )}
              </div>
            </ScrollArea>
          </TabsContent>
        ))}
      </Tabs>
    </div>
  );
}

// Component for individual annotation card
interface AnnotationCardProps {
  annotation: Annotation;
  onClick: () => void;
  formatDate: (timestamp: number | undefined) => string;
  getIcon: (annotation: Annotation) => React.ReactNode;
}

function AnnotationCard({ annotation, onClick, formatDate, getIcon }: AnnotationCardProps) {
  // Determine category and styling
  const categoryLabel = annotation.isAutoGenerated
    ? (annotation.type === AnnotationType.KEY_INSIGHT 
       ? "Key Insight" 
       : annotation.type === AnnotationType.DEFINITION
       ? "Definition"
       : annotation.type === AnnotationType.REFERENCE
       ? "Reference"
       : annotation.category)
    : annotation.category;
    
  const categoryColor = annotation.isAutoGenerated
    ? CATEGORY_COLORS[annotation.type as string] || CATEGORY_COLORS.default
    : CATEGORY_COLORS[annotation.category] || CATEGORY_COLORS.default;
  
  return (
    <Card 
      className="cursor-pointer hover:bg-accent/50 transition-colors" 
      onClick={onClick}
    >
      <CardHeader className="p-3 pb-0">
        <div className="flex items-center justify-between">
          <Badge variant="outline" className={categoryColor}>
            {categoryLabel}
          </Badge>
          <div className="flex items-center text-xs text-muted-foreground">
            <span>Page {annotation.pageNumber}</span>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-3 pt-2">
        <p className="text-sm">{annotation.textSnippet}</p>
        {annotation.comment && (
          <div className="mt-2 border-l-2 border-muted pl-2 py-1">
            <p className="text-xs text-muted-foreground">{annotation.comment}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className="p-3 pt-0 flex items-center justify-between text-xs text-muted-foreground">
        <div className="flex items-center gap-1">
          {getIcon(annotation)}
          <span>
            {annotation.isAutoGenerated ? 'Auto-detected' : `By ${annotation.creator}`}
          </span>
        </div>
        <div className="flex items-center gap-1">
          <CalendarDays className="h-3 w-3" />
          <span>{formatDate(annotation.timestamp)}</span>
        </div>
      </CardFooter>
    </Card>
  );
} 