'use client';

import React, { useState } from 'react';
import { useAnnotations } from '@/components/context_panel/annotations/AnnotationProvider';
import { createAnnotationId } from './AnnotationProvider';
import { Annotation } from './ProfessionalAnnotationSidebar';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Settings, X } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';
import CategoryManager, { CATEGORY_TYPES } from './CategoryManager';

// Interface for additional properties used in skimming highlights
interface SkimmingHighlightProps {
  importance?: number;
  category?: string;
  isAutoGenerated?: boolean;
}

export default function SkimmingHighlightsPanel() {
  const { state, addAnnotation, dispatch } = useAnnotations();
  const [showSettings, setShowSettings] = useState(false);
  
  // Get highlights suitable for skimming from our annotations
  const autoHighlights = state.annotations.filter(ann => 
    // Include definition and reference annotations automatically
    ann.type === "definition" || ann.type === "reference" || 
    // Include others based on our selection criteria
    ann.type === "clause" || ann.type === "risk"
  );
  
  // Group by category
  const groupedHighlights = autoHighlights.reduce<Record<string, Annotation[]>>((acc, highlight) => {
    const category = highlight.type || 'other';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(highlight);
    return acc;
  }, {});
  
  const handleHighlightClick = (annotation: Annotation) => {
    // Set as selected annotation
    dispatch({ type: 'SELECT_ANNOTATION', id: annotation.id });
    
    // Change to the page where the annotation exists
    dispatch({ type: 'SET_CURRENT_PAGE', page: annotation.page });
  };
  
  const handleGenerateHighlights = () => {
    // Generate mock skimming highlights for demo
    const currentPage = state.currentPage || 1;
    
    // Create sample highlights
    const createMockHighlight = (
      type: "clause" | "risk" | "definition" | "reference",
      text: string, 
      excerpt: string, 
      page: number,
      extras?: SkimmingHighlightProps
    ): Annotation => {
      return {
        id: createAnnotationId(),
        type,
        text,
        excerpt,
        page,
        createdAt: new Date(),
        author: { name: "AI Assistant" },
        comments: []
      };
    };
    
    // Sample highlights
    const mockHighlights: Annotation[] = [
      createMockHighlight(
        "definition", 
        "This enables us to iterate more quickly to identify superior architectures and algorithms.",
        "This enables us to iterate more quickly to identify superior architectures and algorithms.",
        1
      ),
      createMockHighlight(
        "reference", 
        "As a result, in several cases, our system is competitive with the transcription of human workers when benchmarked on standard datasets.",
        "As a result, in several cases, our system is competitive with the transcription of human workers when benchmarked on standard datasets.",
        1
      ),
      createMockHighlight(
        "definition", 
        "Intellectual Property Definition",
        "\"Intellectual Property\" means all patents, trademarks, copyrights, trade secrets, and other proprietary rights.",
        1
      ),
      createMockHighlight(
        "reference", 
        "Reference to Master Agreement",
        "This Statement of Work is governed by the terms of the Master Services Agreement dated January 1, 2023.",
        2
      )
    ];
    
    // Add metadata for display purposes
    (mockHighlights[0] as any).importance = 5;
    (mockHighlights[0] as any).category = "Method";
    (mockHighlights[0] as any).isAutoGenerated = true;
    
    (mockHighlights[1] as any).importance = 4;
    (mockHighlights[1] as any).category = "Result";
    (mockHighlights[1] as any).isAutoGenerated = true;
    
    // Add the highlights to the state
    mockHighlights.forEach(highlight => {
      addAnnotation(highlight);
    });
  };
  
  const findCategoryInfo = (type: string) => {
    return CATEGORY_TYPES.find(c => c.id === type) || {
      id: 'other',
      label: 'Other',
      color: 'bg-gray-100 text-gray-800 border-gray-200'
    };
  };
  
  return (
    <div className="h-full flex flex-col">
      <div className="p-3 border-b flex items-center justify-between">
        <h2 className="text-lg font-semibold">Skimming Highlights</h2>
        <Button 
          variant="ghost" 
          size="icon"
          onClick={() => setShowSettings(!showSettings)}
        >
          {showSettings ? (
            <X className="h-4 w-4" />
          ) : (
            <Settings className="h-4 w-4" />
          )}
        </Button>
      </div>
      
      {showSettings ? (
        <CategoryManager 
          onGenerateSkimmingHighlights={handleGenerateHighlights}
          hasAutoHighlights={autoHighlights.length > 0}
        />
      ) : (
        <ScrollArea className="flex-1">
          <div className="p-3">
            {Object.entries(groupedHighlights).length > 0 ? (
              Object.entries(groupedHighlights).map(([category, highlights]) => {
                const categoryInfo = findCategoryInfo(category.toLowerCase());
                
                return (
                  <div key={category} className="mb-4">
                    <h3 className="text-sm font-medium mb-2 flex items-center">
                      <Badge variant="outline" className={categoryInfo.color}>
                        {categoryInfo.label}
                      </Badge>
                    </h3>
                    <div className="space-y-2">
                      {highlights.map(highlight => (
                        <div 
                          key={highlight.id}
                          className={`p-2 rounded-md border hover:border-primary transition-colors cursor-pointer ${categoryInfo.color.replace('border-', '')}`}
                          onClick={() => handleHighlightClick(highlight)}
                        >
                          <div className="flex items-center justify-between mb-1 text-xs text-muted-foreground">
                            <span>Page {highlight.page}</span>
                            {(highlight as any).importance && (
                              <span className="text-xs">
                                {Array((highlight as any).importance).fill('â˜…').join('')}
                              </span>
                            )}
                          </div>
                          <p className="text-sm">{highlight.excerpt}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })
            ) : (
              <div className="flex flex-col items-center justify-center h-[400px] text-center p-4">
                <p className="text-sm text-muted-foreground mb-4">
                  No skimming highlights available for this document.
                </p>
                <Button 
                  onClick={handleGenerateHighlights}
                  size="sm"
                >
                  Generate Highlights
                </Button>
              </div>
            )}
          </div>
        </ScrollArea>
      )}
    </div>
  );
} 