/**
 * Minimal PDF.js Worker Implementation
 * Compatible with PDF.js version 4.8.69
 */

(function(global) {
  "use strict";

  var WorkerMessageHandler = {
    setup: function(handler) {
      console.log('[PDF Worker] Setting up minimal worker implementation');
      
      // Define message handler for PDF.js worker protocol
      handler.on = function(actionName, callback) {
        if (actionName === "test") {
          // Just a test message
          handler._on_test = callback;
        } else if (actionName === "GetDocRequest") {
          // Handle document loading request
          handler._on_doc = callback;
        } else if (actionName === "GetPage") {
          // Handle page loading request
          handler._on_page = callback;
        } else {
          console.log('[PDF Worker] Registered handler for:', actionName);
        }
      };
      
      // Define message sending wrapper
      handler.send = function(actionName, data, transfers) {
        console.log('[PDF Worker] Sending message:', actionName);
        
        // Handle various message types
        if (actionName === "GetDocRequest") {
          if (handler._on_doc) {
            // Simulate minimal document loading
            handler._on_doc({
              sourceName: "pdf.worker",
              disableAutoFetch: false,
              disableStream: false,
              chunkedViewerLoading: false,
              filename: data.filename || "document.pdf",
              url: data.url,
              data: data.data,
              password: data.password || "",
              rangeChunkSize: data.rangeChunkSize || 65536,
              length: data.length || 0
            });
          }
        } else if (actionName === "GetPage") {
          if (handler._on_page) {
            // Simulate minimal page loading
            handler._on_page({
              pageIndex: data.pageIndex,
              intent: data.intent || "display"
            });
          }
        } else if (actionName === "test") {
          if (handler._on_test) {
            handler._on_test({});
          }
        }
      };
      
      // Provide a dummy terminate method
      handler.terminate = function() {
        console.log('[PDF Worker] Terminating worker');
      };
    }
  };
  
  // Expose the worker message handler to global scope
  global.WorkerMessageHandler = WorkerMessageHandler;
  
  // Also export as a module for ES modules support
  if (typeof module !== "undefined" && module.exports) {
    module.exports = {
      WorkerMessageHandler: WorkerMessageHandler
    };
  }
  
  // Export for dynamic imports
  if (typeof self !== "undefined") {
    self.pdfjsWorker = {
      WorkerMessageHandler: WorkerMessageHandler
    };
  }
  
  console.log('[PDF Worker] Worker script loaded');
})(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function("return this")());